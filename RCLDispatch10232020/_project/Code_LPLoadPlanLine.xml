<Graph ClassName="LPLoadPlanLine" Source="#CDATA" IsNew="True" FileType="NewDac">
    <CDATA name="Source"><![CDATA[using System;
using PX.Data;
using PX.Data.ReferentialIntegrity.Attributes;
using PX.Objects.AR;
using PX.Objects.IN;
using PX.Objects.SO;

namespace Dispatch
{
  [Serializable]
  public partial class LPLoadPlanLine : IBqlTable
  {
        public class PK : PrimaryKeyOf<LPLoadPlanLine>.By<tripTicketNbr, lineNbr>
        {
            public static LPLoadPlanLine Find(
                PXGraph graph, string tripTicketNbr, int lineNbr)
                => FindBy(graph, tripTicketNbr, lineNbr);

        }

        public static class FK
        {
            public class LPTripHead : LPLoadPlanMaster.PK.ForeignKeyOf<LPLoadPlanLine>.By<tripTicketNbr> { }
        }


    #region NoteID

    public abstract class noteID : PX.Data.BQL.BqlGuid.Field<noteID> { }
    protected Guid? _NoteID;
    [PXNote]
    public virtual Guid? NoteID
    {
        get
        {
            return this._NoteID;
        }
        set
        {
            this._NoteID = value;
        }
    }

    #endregion
    #region Unbound

    #region Selected

    public abstract class selected : IBqlField { }
    [PXBool]
    [PXDefault(false,PersistingCheck = PXPersistingCheck.Nothing)]
    [PXUIField(DisplayName = "")]
    public virtual bool? Selected { get; set; }

    #endregion

    #region OrderQty

    public abstract class orderQty : IBqlField { }
    [PXDecimal] 
    [PXUIField(DisplayName = "Order Qty")]
    [PXDBScalar(typeof(Search<
        SOLine.orderQty,
        Where<SOLine.orderNbr,Equal<sOOrderNbr>,
            And<SOLine.orderType,Equal<sOOrderType>,
            And<SOLine.lineNbr,Equal<sOLineNbr>>>>>))]
    public virtual Decimal? OrderQty { get; set; }

    #endregion

    #endregion

    #region SOOrderNbr
        [PXDBString(15, InputMask = "")]
    [PXUIField(DisplayName = "Order Nbr")]
    public virtual string SOOrderNbr { get; set; }
    public abstract class sOOrderNbr : PX.Data.BQL.BqlString.Field<sOOrderNbr> { }
    #endregion

    #region SOOrderType
    [PXDBString(2, IsFixed = true, InputMask = "")]
    [PXUIField(DisplayName = "Order Type")]
    public virtual string SOOrderType { get; set; }
    public abstract class sOOrderType : PX.Data.BQL.BqlString.Field<sOOrderType> { }
    #endregion

    #region SOLineNbr
    [PXDBInt()]
 
    [PXUIField(DisplayName = "Line Nbr")]
    public virtual int? SOLineNbr { get; set; }
    public abstract class sOLineNbr : PX.Data.BQL.BqlInt.Field<sOLineNbr> { }
        #endregion

    #region LineNbr

        [PXDBInt(IsKey = true)]
        [PXUIField(DisplayName = "Line Nbr")]
        [PXLineNbr(typeof(LPLoadPlanMaster.lineCntr))]
        [PXParent(typeof(Select<
        LPLoadPlanMaster,
        Where<LPLoadPlanMaster.tripTIcketNbr, Equal<Current<tripTicketNbr>>>>))]
        public virtual int? LineNbr { get; set; }
        public abstract class lineNbr : PX.Data.BQL.BqlInt.Field<lineNbr> { }

        #endregion

    #region LineCntr
    [PXDBInt()]
    [PXDefault(0)]
    [PXUIField(DisplayName = "Line Cntr")]
    public virtual int? LineCntr { get; set; }
    public abstract class lineCntr : PX.Data.BQL.BqlInt.Field<lineCntr> { }
    #endregion

    #region Zone
        [PXDBString(20, InputMask = "")]
    [PXUIField(DisplayName = "Zone")]
        [PXDBDefault(typeof(LPLoadPlanMaster.zone),PersistingCheck = PXPersistingCheck.Nothing)]
        public virtual string Zone { get; set; }
    public abstract class zone : PX.Data.BQL.BqlString.Field<zone> { }
    #endregion

    #region TripTicketNbr
    [PXDBString(15, IsUnicode = true, InputMask = "",IsKey =true)]
    [PXUIField(DisplayName = "Trip Ticket Nbr")]
    [PXDBDefault(typeof(LPLoadPlanMaster.tripTIcketNbr))]
    public virtual string TripTicketNbr { get; set; }
    public abstract class tripTicketNbr : PX.Data.BQL.BqlString.Field<tripTicketNbr> { }
        #endregion

    #region ItemDesc
        [PXDBString(200)]
        [PXUIField(DisplayName = "Item Description")]
        public virtual string ItemDesc { get; set; }
        public abstract class itemDesc : PX.Data.BQL.BqlString.Field<itemDesc> { }
        #endregion

    #region ItemQty
        [PXDBDecimal()]
        [PXUIField(DisplayName = "Load Qty")]
        [PXDefault(TypeCode.Decimal, "0.00",PersistingCheck = PXPersistingCheck.Nothing)]
        public virtual Decimal? ItemQty { get; set; }
        public abstract class itemQty : PX.Data.BQL.BqlDecimal.Field<itemQty> { }
        #endregion

    #region UOM
    public abstract class uOM : PX.Data.BQL.BqlString.Field<uOM> { }
    [INUnit(typeof(inventoryID),DisplayName = "UOM")]
    public virtual string UOM { get; set; }
    #endregion

    #region InvoiceNBr
        public abstract class invoiceNbr : IBqlField { }
        [PXString(15)]
        [PXUIField(DisplayName = "Invoice #",Enabled = false)]
        [PXDBScalar(typeof(Search<
            ARTran.refNbr, 
            Where<ARTran.sOOrderNbr, Equal<sOOrderNbr>, 
                And<ARTran.sOOrderType, Equal<sOOrderType>>>>))]
        public virtual string InvoiceNbr { get; set; }
        #endregion

    #region Type
        public abstract class invoiceType : IBqlField { }
        [PXString(15)]
        [PXUIField(DisplayName = "Order Type",Enabled = false)]
        [ARDocType.List]
        [PXDBScalar(typeof(Search<
            ARTran.tranType, 
            Where<ARTran.sOOrderNbr, Equal<sOOrderNbr>, 
                And<ARTran.sOOrderType, Equal<sOOrderType>>>>))]
        public virtual string InvoiceType { get; set; }

        #endregion

    #region CustomerID

    [PXDBInt()]
    [PXUIField(DisplayName = "Customer ID")]
    public virtual int? CustomerID { get; set; }
    public abstract class customerID : PX.Data.BQL.BqlInt.Field<customerID> { }

    #endregion

    #region Warehouse

    [PXDBInt()]
    [PXUIField(DisplayName = "Warehouse")]
    //[PXSelector(typeof(Search<INSite.siteID,Where<INSite.siteID,Equal<siteID>>>),SubstituteKey = typeof(INSite.siteCD))]
    public virtual int? SiteID { get; set; }
    public abstract class siteID : PX.Data.BQL.BqlInt.Field<siteID> { }

    #endregion

    #region ShipmentNbr

    [PXDBString(15, InputMask = "")]
    [PXUIField(DisplayName = "Shipment #")]
    public virtual string ShipmentNbr { get; set; }
    public abstract class shipmentNbr : PX.Data.BQL.BqlString.Field<sOOrderNbr> { }
    #endregion

    #region Unit KGS
    [PXDBDecimal()]
    [PXUIField(DisplayName = "Unit KGS")]
    [PXDefault(TypeCode.Decimal, "0.00", PersistingCheck = PXPersistingCheck.Nothing)]
    public virtual Decimal? UnitKGS { get; set; }
    public abstract class unitKGS : PX.Data.BQL.BqlDecimal.Field<unitKGS> { }
    #endregion

    #region Unit CBM
    [PXDBDecimal()]
    [PXUIField(DisplayName = "Unit CBM")]
    [PXDefault(TypeCode.Decimal, "0.00", PersistingCheck = PXPersistingCheck.Nothing)]
    public virtual Decimal? UnitCBM { get; set; }
    public abstract class unitCBM : PX.Data.BQL.BqlDecimal.Field<unitCBM> { }
    #endregion

    #region Total Unit CBM
    [PXDBDecimal()]
    [PXUIField(DisplayName = "Total Unit CBM")]
    [PXDefault(TypeCode.Decimal, "0.00", PersistingCheck = PXPersistingCheck.Nothing)]
    [PXFormula(typeof(Mult<LPLoadPlanLine.itemQty,unitCBM>))]
    [PXFormula(null,typeof(SumCalc<LPLoadPlanMaster.totalLoadCBM>))]
    public virtual Decimal? TotalUnitCBM { get; set; }
    public abstract class totalUnitCBM : PX.Data.BQL.BqlDecimal.Field<totalUnitCBM> { }
    #endregion

    #region Total Unit KGS
    [PXDBDecimal()]
    [PXUIField(DisplayName = "Total Unit KGS")]
    [PXDefault(TypeCode.Decimal, "0.00", PersistingCheck = PXPersistingCheck.Nothing)]
    [PXFormula(typeof(Mult<LPLoadPlanLine.itemQty,unitKGS>))]
    [PXFormula(null,typeof(SumCalc<LPLoadPlanMaster.totalLoadKGS>))]
    public virtual Decimal? TotalUnitKGS { get; set; }
    public abstract class totalUnitKGS : PX.Data.BQL.BqlDecimal.Field<totalUnitKGS> { }
    #endregion

    #region BufferQty
    public abstract class bufferQty : PX.Data.BQL.BqlDecimal.Field<bufferQty> { }
    [PXDBDecimal()]
    [PXUIField(DisplayName = "Buffer Qty")]
    [PXDefault(TypeCode.Decimal, "0.00", PersistingCheck = PXPersistingCheck.Nothing)]
    public virtual decimal? BufferQty { get; set; }

    #endregion

    #region InventoryID

    [PXDBInt()]
    [PXUIField(DisplayName = "Inventory ID")]
    public virtual int? InventoryID { get; set; }
    public abstract class inventoryID : PX.Data.BQL.BqlInt.Field<inventoryID> { }

    #endregion

    #region Old Trip Ticket Nbr
    [PXDBString(15, InputMask = "")]
    [PXUIField(DisplayName = "Old Trip Ticket Nbr")]
    public virtual string OldTripTicketNbr { get; set; }
    public abstract class oldTripTicketNbr : PX.Data.BQL.BqlString.Field<oldTripTicketNbr> { }
    #endregion

    #region Has new Trip Ticket Nbr
    [PXDBBool()]
    [PXDefault(false,PersistingCheck =PXPersistingCheck.Nothing)]
    public virtual bool? HasNewTripTicketNbr { get; set; }
    public abstract class hasNewTripTicketNbr : PX.Data.BQL.BqlBool.Field<hasNewTripTicketNbr> { }
    #endregion

    #region ForecastDate

    public abstract class forecastDate : IBqlField { }
    [PXDBDate]
    [PXUIField(DisplayName = "Foreast Date", Enabled = false)]
    public virtual DateTime? ForecastDate { get; set; }

    #endregion

    #region LocationID

    public abstract class locationID : PX.Data.BQL.BqlInt.Field<locationID> { }
    [LocationAvail(typeof(inventoryID), typeof(INTran.subItemID), typeof(siteID), false, false, true, DisplayName = "Location Warehouse")]
    public virtual Int32? LocationID { get; set; }
    #endregion

    #region TransferRefNbr
    public abstract class transferRefNbr : PX.Data.BQL.BqlString.Field<transferRefNbr> { }
    [PXString(15, IsUnicode = true)]
    [PXUIField(DisplayName = "Transfer Ref Nbr", Enabled = false)]
    [PXDBScalar(typeof(Search<INTran.refNbr,
                Where<INTranExt.usrTripTicketNbr, Equal<tripTicketNbr>>>))]
    public virtual string TransferRefNbr { get; set; }
        #endregion

        #region Tstamp
        [PXDBTimestamp()]
    [PXUIField(DisplayName = "Tstamp")]
    public virtual byte[] Tstamp { get; set; }
    public abstract class tstamp : PX.Data.BQL.BqlByteArray.Field<tstamp> { }
    #endregion

    #region CreatedByID
    [PXDBCreatedByID()]
    public virtual Guid? CreatedByID { get; set; }
    public abstract class createdByID : PX.Data.BQL.BqlGuid.Field<createdByID> { }
    #endregion

    #region CreatedByScreenID
    [PXDBCreatedByScreenID()]
    public virtual string CreatedByScreenID { get; set; }
    public abstract class createdByScreenID : PX.Data.BQL.BqlString.Field<createdByScreenID> { }
    #endregion

    #region CreatedDateTime
    [PXDBCreatedDateTime()]
    [PXUIField(DisplayName = "Created Date Time")]
    public virtual DateTime? CreatedDateTime { get; set; }
    public abstract class createdDateTime : PX.Data.BQL.BqlDateTime.Field<createdDateTime> { }
    #endregion

    #region LastModifiedByID
    [PXDBLastModifiedByID()]
    public virtual Guid? LastModifiedByID { get; set; }
    public abstract class lastModifiedByID : PX.Data.BQL.BqlGuid.Field<lastModifiedByID> { }
    #endregion

    #region LastModifiedByScreenID
    [PXDBLastModifiedByScreenID()]
    public virtual string LastModifiedByScreenID { get; set; }
    public abstract class lastModifiedByScreenID : PX.Data.BQL.BqlString.Field<lastModifiedByScreenID> { }
    #endregion

    #region LastModifiedDateTime
    [PXDBLastModifiedDateTime()]
    [PXUIField(DisplayName = "Last Modified Date Time")]
    public virtual DateTime? LastModifiedDateTime { get; set; }
    public abstract class lastModifiedDateTime : PX.Data.BQL.BqlDateTime.Field<lastModifiedDateTime> { }
    #endregion
  }
}]]></CDATA>
</Graph>
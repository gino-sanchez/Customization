<Graph ClassName="Backload" Source="#CDATA" IsNew="True" FileType="NewDac">
    <CDATA name="Source"><![CDATA[using System;
using PX.Data;
using PX.Objects.CS;
using DispatchSetup;
using PX.Objects.AR;
using PX.Objects.CR;
using CRLocation = PX.Objects.CR.Standalone.Location;
namespace Dispatch
{
    public abstract class BackloadStatus : IBqlField
    {
        public class ListAttribute : PXStringListAttribute
        {
            public ListAttribute() : base(
                new string[] {Open,Hold,Completed },
                new string[] { "Open", "On Hold", "Completed"}
            )
                { }
        }
        public const string Hold = "HD";
        public const string Open = "ON";
        public const string Completed = "CP";

        public class hold : Constant<string>
        {
            public hold() : base(Hold) { }
        }
        public class open : Constant<string>
        {
            public open() : base(Open) { }
        }
        public class completed : Constant<string>
        {
            public completed() : base(Completed) { } 
        }
    }

    [Serializable]
    [PXPrimaryGraph(typeof(BackloadEntry))]
  public class Backload : IBqlTable
  {
        
    #region BackloadNbr
    [PXDBString(15, IsKey = true, IsUnicode = true, InputMask = "")]
    [PXUIField(DisplayName = "Backload Nbr")]
    [PXSelector(typeof(Search<backloadNbr>), typeof(backloadNbr), typeof(backloadStatus), typeof(backloadDate),ValidateValue = false)]
    [AutoNumber(typeof(DispatchNumberingSetup.backloadNumberingID), typeof(AccessInfo.businessDate))]
    public virtual string BackloadNbr { get; set; }
    public abstract class backloadNbr : PX.Data.BQL.BqlString.Field<backloadNbr> { }
    #endregion

    #region Hold
    public abstract class hold : PX.Data.BQL.BqlBool.Field<hold> { }
    [PXDBBool()]
    [PXUIField(DisplayName = "Hold")]
    [PXDefault(true,PersistingCheck = PXPersistingCheck.Nothing)]
    public virtual bool? Hold { get; set; }
    #endregion

    #region BackloadDate
        [PXDBDate()]
    [PXUIField(DisplayName = "Backload Date")]
    [PXDefault(typeof(AccessInfo.businessDate))]
    public virtual DateTime? BackloadDate { get; set; }
    public abstract class backloadDate : PX.Data.BQL.BqlDateTime.Field<backloadDate> { }
        #endregion

    #region UnboundSiteID
    public abstract class siteID : PX.Data.BQL.BqlInt.Field<siteID> { }
    [PXInt()]
    [PXUIField(DisplayName = "Warehouse")]
    public virtual int? SiteID { get; set; }
    #endregion

    #region BackloadStatus
    [PXDBString(10, IsUnicode = true, InputMask = "")]
    [PXUIField(DisplayName = "Backload Status")]
    [BackloadStatus.List]
    [PXDefault(typeof(BackloadStatus.hold))]
    public virtual string BackloadStatus { get; set; }
    public abstract class backloadStatus : PX.Data.BQL.BqlString.Field<backloadStatus> { }
        #endregion

    #region IsCM
    public abstract class isCM : PX.Data.BQL.BqlBool.Field<isCM> { }
    [PXDBBool()]
    [PXDefault(false,PersistingCheck = PXPersistingCheck.Nothing)]
    [PXUIField(DisplayName = "Is CM",Enabled = false,Visible = false)]
    public virtual bool? IsCM { get; set; } 

    #endregion

    #region CustomerID
        [PXDBInt()]
    [PXUIField(DisplayName = "Customer Name")]
    [PXSelector(typeof(Search<Customer.bAccountID>), typeof(Customer.acctCD), typeof(Customer.acctName), SubstituteKey = typeof(Customer.acctCD), DescriptionField = typeof(Customer.acctName))]
    public virtual int? CustomerID { get; set; }
    public abstract class customerID : PX.Data.BQL.BqlInt.Field<customerID> { }
        #endregion

    #region CustomerIDLocation
        [LocationID(typeof(Where<Location.bAccountID, Equal<Current<Backload.customerID>>,
                And<Location.isActive, Equal<True>>>), DescriptionField = typeof(Location.descr), Visibility = PXUIVisibility.SelectorVisible)]
        public virtual int? CustomerIDLocation { get; set; }
        //[PXDefault(typeof(Search2<BAccountR.defLocationID,InnerJoin<Location,On<Location.bAccountID,Equal<BAccountR.bAccountID>,And<Location.locationID,Equal<BAccountR.defLocationID>>>>,
        //    Where<BAccountR.bAccountID, Equal<Current<Backload.customerID>>,
        //        And<CRLocation.isActive, Equal<True>>>>))]
    public abstract class customerIDLocation : PX.Data.BQL.BqlInt.Field<customerIDLocation> { }
    #endregion

    #region LineCntr
    [PXDBInt()]
    [PXUIField(DisplayName = "Line Cntr")]
    [PXDefault(0)]
    public virtual int? LineCntr { get; set; }
    public abstract class lineCntr : PX.Data.BQL.BqlInt.Field<lineCntr> { }
    #endregion

    #region Tstamp
    [PXDBTimestamp()]
    [PXUIField(DisplayName = "Tstamp")]
    public virtual byte[] Tstamp { get; set; }
    public abstract class tstamp : PX.Data.BQL.BqlByteArray.Field<tstamp> { }
    #endregion

    #region CreatedByID
    [PXDBCreatedByID()]
    public virtual Guid? CreatedByID { get; set; }
    public abstract class createdByID : PX.Data.BQL.BqlGuid.Field<createdByID> { }
    #endregion

    #region CreatedDateT9ke
    [PXDBCreatedDateTime()]
    [PXUIField(DisplayName = "Created Date T9ke")]
    public virtual DateTime? CreatedDateT9ke { get; set; }
    public abstract class createdDateT9ke : PX.Data.BQL.BqlDateTime.Field<createdDateT9ke> { }
    #endregion

    #region CreatedByScreenID
    [PXDBCreatedByScreenID()]
    public virtual string CreatedByScreenID { get; set; }
    public abstract class createdByScreenID : PX.Data.BQL.BqlString.Field<createdByScreenID> { }
    #endregion

    #region LastModifiedByID
    [PXDBLastModifiedByID()]
    public virtual Guid? LastModifiedByID { get; set; }
    public abstract class lastModifiedByID : PX.Data.BQL.BqlGuid.Field<lastModifiedByID> { }
    #endregion

    #region LastModifiedByScreenID
    [PXDBLastModifiedByScreenID()]
    public virtual string LastModifiedByScreenID { get; set; }
    public abstract class lastModifiedByScreenID : PX.Data.BQL.BqlString.Field<lastModifiedByScreenID> { }
    #endregion

    #region LastModifiedDateTime
    [PXDBLastModifiedDateTime()]
    [PXUIField(DisplayName = "Last Modified Date Time")]
    public virtual DateTime? LastModifiedDateTime { get; set; }
    public abstract class lastModifiedDateTime : PX.Data.BQL.BqlDateTime.Field<lastModifiedDateTime> { }
    #endregion
  }
}]]></CDATA>
</Graph>
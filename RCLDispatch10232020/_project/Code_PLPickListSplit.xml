<Graph ClassName="PLPickListSplit" Source="#CDATA" IsNew="True" FileType="NewDac">
    <CDATA name="Source"><![CDATA[using System;
using PX.Data;
using PL;
using PX.Objects.IN;
using PX.Objects.PM;
using PX.Data.ReferentialIntegrity.Attributes;
using PX.Objects.GL;
using static PX.Objects.FS.SharedClasses;
using PX.Objects.SO;

namespace Dispatch
{
  [Serializable]
  public class PLPickListSplit : IBqlTable,ILSPrimary
    {
        #region PLPickListNbr
        [PXDBString(15, IsUnicode = true, InputMask = "", IsKey = true)]
        [PXDBDefault(typeof(PLPickList.pickListNbr))]
        [PXUIField(DisplayName = "PLPick List Nbr")]
        [PXParent(typeof(Select<
            PLPickList,
            Where<PLPickList.pickListNbr, Equal<Current<pLPickListNbr>>>>))]
        public virtual string PLPickListNbr { get; set; }
        public abstract class pLPickListNbr : PX.Data.BQL.BqlString.Field<pLPickListNbr> { }
        #endregion

        #region LineNbr
        [PXDBInt(IsKey = true)]
        //[PXDefault(typeof(PLPickListLine.lineNbr), PersistingCheck = PXPersistingCheck.Nothing)]
        [PXLineNbr(typeof(PLPickList.lineCntr))]
        [PXUIField(DisplayName = "Line Nbr")]
        public virtual int? LineNbr { get; set; }
        public abstract class lineNbr : PX.Data.BQL.BqlInt.Field<lineNbr> { }
        #endregion

        #region PLPickListLine

        public abstract class pLPickListLine : IBqlField { }
        [PXDBInt()]
        [PXUIField(DisplayName = "PLPickListLineNbr")]
        [PXDefault(typeof(PLPickListLine.lineNbr))]
        public virtual int? PLPickListLine { get; set; }

        #endregion

        #region Loaded

        public abstract class loaded : PX.Data.BQL.BqlBool.Field<loaded> { }
        [PXDBBool()]
        [PXDefault(false,PersistingCheck = PXPersistingCheck.Nothing)]
        public virtual bool? Loaded { get; set; }

        #endregion

        #region LotSerialNbr
        public abstract class lotSerialNbr : PX.Data.BQL.BqlString.Field<lotSerialNbr> { }
        protected String _LotSerialNbr;
        [INLotSerialNbr(typeof(inventoryID), typeof(subItemID), typeof(locationID), PersistingCheck = PXPersistingCheck.Nothing, FieldClass = "LotSerial",DisplayName = "Lot Serial Nbr")]
        [PXDefault()]
        public virtual String LotSerialNbr
        {
            get
            {
                return this._LotSerialNbr;
            }
            set
            {
                this._LotSerialNbr = value;
            }
        }
        #endregion

        #region Released
        public abstract class released : PX.Data.BQL.BqlBool.Field<released> { }
        [PXDBBool()]
        [PXDefault(false,PersistingCheck = PXPersistingCheck.Nothing)]
        public virtual bool? Released { get; set; }
        #endregion

        #region Cancelled
        public abstract class cancelled : PX.Data.BQL.BqlBool.Field<cancelled> { }
        [PXDBBool()]
        [PXDefault(false, PersistingCheck = PXPersistingCheck.Nothing)]
        public virtual bool? Cancelled { get; set; }
        #endregion

        #region InventoryID
        //[PXDBInt()]
        [PXDefault(typeof(PLPickListLine.inventoryID))]
        [StockItem]
        public virtual int? InventoryID { get; set; }
        public abstract class inventoryID : PX.Data.BQL.BqlInt.Field<inventoryID> { }
        #endregion

        #region SubItemID
        public abstract class subItemID : PX.Data.BQL.BqlInt.Field<subItemID> { }
        protected Int32? _SubItemID;
        [PXDefault(typeof(Search<InventoryItem.defaultSubItemID,
            Where<InventoryItem.inventoryID, Equal<Current<INTran.inventoryID>>,
            And<InventoryItem.defaultSubItemOnEntry, Equal<True>>>>),
            PersistingCheck = PXPersistingCheck.Nothing)]
        [PX.Objects.IN.SubItem(
            typeof(inventoryID),
            typeof(LeftJoin<INSiteStatus,
                On<INSiteStatus.subItemID, Equal<INSubItem.subItemID>,
                And<INSiteStatus.inventoryID, Equal<Optional<inventoryID>>,
                And<INSiteStatus.siteID, Equal<Optional<siteID>>>>>>))]
        [PXFormula(typeof(Default<INTran.inventoryID>))]
        public virtual Int32? SubItemID
        {
            get
            {
                return this._SubItemID;
            }
            set
            {
                this._SubItemID = value;
            }
        }
        #endregion

        #region Qty
        [PXDBDecimal()]
        [PXUIField(DisplayName = "Qty")]
        public virtual Decimal? Quantity { get; set; }
        public abstract class quantity : PX.Data.BQL.BqlDecimal.Field<quantity> { }
        #endregion

        #region SiteID
        public abstract class siteID : PX.Data.BQL.BqlInt.Field<siteID> { }
        [PXDBInt()]
        [PXDefault(typeof(PLPickListLine.siteID))]
        [PXUIField(DisplayName = "Warehouse", Visible = false)]

        public virtual int? SiteID { get; set; }

        #endregion

        #region LocationID

        public abstract class locationID : PX.Data.BQL.BqlInt.Field<locationID> { }
        [LocationAvail(typeof(inventoryID), typeof(subItemID), typeof(siteID), false, false, true, DisplayName = "Location Warehouse", Visible = false)]
        [PXDefault(typeof(PLPickListLine.locationID))]
        public virtual Int32? LocationID { get; set; }
        #endregion


        #region ProjectID
        public abstract class projectID : PX.Data.BQL.BqlInt.Field<projectID> { }
        protected Int32? _ProjectID;
        [PXInt]
        public virtual Int32? ProjectID
        {
            get
            {
                return this._ProjectID;
            }
            set
            {
                this._ProjectID = value;
            }
        }
        #endregion
        #region TaskID
        public abstract class taskID : PX.Data.BQL.BqlInt.Field<taskID> { }
        protected Int32? _TaskID;
        [PXInt]
        public virtual Int32? TaskID
        {
            get
            {
                return this._TaskID;
            }
            set
            {
                this._TaskID = value;
            }
        }
        #endregion

        #region BaseQty
        public abstract class baseQty : PX.Data.BQL.BqlDecimal.Field<baseQty> { }
        protected Decimal? _BaseQty;
        [PXDBQuantity()]
        [PXDefault(TypeCode.Decimal, "0.0",PersistingCheck = PXPersistingCheck.Nothing)]
        public virtual Decimal? BaseQty
        {
            get
            {
                return this._BaseQty;
            }
            set
            {
                this._BaseQty = value;
            }
        }
        #endregion

        #region Qty
        public abstract class qty : PX.Data.BQL.BqlDecimal.Field<qty> { }
        protected Decimal? _Qty;
        [PXDBQuantity(typeof(PLPickListSplit.uOM), typeof(PLPickListSplit.baseQty))]
        [PXDefault(TypeCode.Decimal, "0.00")]
        [PXUIField(DisplayName = "Quantity")]
        public virtual Decimal? Qty
        {
            get
            {
                return this._Qty;
            }
            set
            {
                this._Qty = value;
            }
        }
        #endregion

        #region UOM
        public abstract class uOM : PX.Data.BQL.BqlString.Field<uOM> { }
        protected String _UOM;
        [INUnit(typeof(inventoryID), DisplayName = "UOM", Enabled = false)]
        [PXDefault(typeof(PLPickListLine.uOM))]
        public virtual String UOM
        {
            get
            {
                return this._UOM;
            }
            set
            {
                this._UOM = value;
            }
        }
        #endregion

        #region ExpireDate
        public abstract class expireDate : PX.Data.BQL.BqlDateTime.Field<expireDate> { }
        protected DateTime? _ExpireDate;
        [INExpireDate(typeof(PLPickListSplit.inventoryID), PersistingCheck = PXPersistingCheck.Nothing, FieldClass = "LotSerial")]
        public virtual DateTime? ExpireDate
        {
            get
            {
                return this._ExpireDate;
            }
            set
            {
                this._ExpireDate = value;
            }
        }
        #endregion

        #region InvtMult
        public abstract class invtMult : PX.Data.BQL.BqlShort.Field<invtMult> { }
        protected Int16? _InvtMult;
        [PXDBShort(BqlField = typeof(PLPickListSplit.invtMult))]
        [PXUIField(DisplayName = "Multiplier")]
        public virtual Int16? InvtMult
        {
            get
            {
                return this._InvtMult;
            }
            set
            {
                this._InvtMult = value;
            }
        }
        #endregion

        #region TranDate
        public abstract class tranDate : PX.Data.BQL.BqlDateTime.Field<tranDate> { }
        protected DateTime? _TranDate;
        [PXDBDate()]
        [PXDBDefault(typeof(AccessInfo.businessDate))]
        public virtual DateTime? TranDate
        {
            get
            {
                return this._TranDate;
            }
            set
            {
                this._TranDate = value;
            }
        }
        #endregion
        #region TranType
        public abstract class tranType : PX.Data.BQL.BqlString.Field<tranType> { }
        protected String _TranType;
        [PXDBString(3, IsFixed = true)]
        [PXDefault(INTranType.Transfer)]
        [INTranType.List()]
        [PXUIField(DisplayName = "Tran. Type")]
        public virtual String TranType
        {
            get
            {
                return this._TranType;
            }
            set
            {
                this._TranType = value;
            }
        }
        #endregion

        #region HasMixedProjectTasks
        public abstract class hasMixedProjectTasks : PX.Data.BQL.BqlBool.Field<hasMixedProjectTasks> { }
        protected bool? _HasMixedProjectTasks;
        [PXBool]
        [PXFormula(typeof(False))]
        public virtual bool? HasMixedProjectTasks
        {
            get
            {
                return _HasMixedProjectTasks;
            }
            set
            {
                _HasMixedProjectTasks = value;
            }
        }
        #endregion
        #region UnassignedQty
        public abstract class unassignedQty : PX.Data.BQL.BqlDecimal.Field<unassignedQty> { }
        protected Decimal? _UnassignedQty;
        [PXDBDecimal(6)]
        [PXDefault(TypeCode.Decimal, "0.0")]
        public virtual Decimal? UnassignedQty
        {
            get
            {
                return this._UnassignedQty;
            }
            set
            {
                this._UnassignedQty = value;
            }
        }
        #endregion

        #region Tstamp
        [PXDBTimestamp()]
        [PXUIField(DisplayName = "Tstamp")]
        public virtual byte[] Tstamp { get; set; }
        public abstract class tstamp : PX.Data.BQL.BqlByteArray.Field<tstamp> { }
        #endregion

        #region CreatedByID
        [PXDBCreatedByID()]
        public virtual Guid? CreatedByID { get; set; }
        public abstract class createdByID : PX.Data.BQL.BqlGuid.Field<createdByID> { }
        #endregion

        #region CreatedByScreenID
        [PXDBCreatedByScreenID()]
        public virtual string CreatedByScreenID { get; set; }
        public abstract class createdByScreenID : PX.Data.BQL.BqlString.Field<createdByScreenID> { }
        #endregion

        #region CreatedDateTime
        [PXDBCreatedDateTime()]
        [PXUIField(DisplayName = "Created Date Time")]
        public virtual DateTime? CreatedDateTime { get; set; }
        public abstract class createdDateTime : PX.Data.BQL.BqlDateTime.Field<createdDateTime> { }
        #endregion

        #region LastModifiedByID
        [PXDBLastModifiedByID()]
        public virtual Guid? LastModifiedByID { get; set; }
        public abstract class lastModifiedByID : PX.Data.BQL.BqlGuid.Field<lastModifiedByID> { }
        #endregion

        #region LastModifiedByScreenID
        [PXDBLastModifiedByScreenID()]
        public virtual string LastModifiedByScreenID { get; set; }
        public abstract class lastModifiedByScreenID : PX.Data.BQL.BqlString.Field<lastModifiedByScreenID> { }
        #endregion

        #region LastModifiedDateTime
        [PXDBLastModifiedDateTime()]
        [PXUIField(DisplayName = "Last Modified Date Time")]
        public virtual DateTime? LastModifiedDateTime { get; set; }
        public abstract class lastModifiedDateTime : PX.Data.BQL.BqlDateTime.Field<lastModifiedDateTime> { }
        #endregion
    }
}]]></CDATA>
</Graph>
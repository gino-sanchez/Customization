<Graph ClassName="Truck" Source="#CDATA" IsNew="True" FileType="NewDac">
    <CDATA name="Source"><![CDATA[using System;
using PX.Data;
using PX.Objects.GL;
using PX.Objects.FA;
using PX.Objects.AR;
using PX.Objects.EP;

namespace Dispatch
{


    //status
    public abstract class TruckStatus : IBqlField
    {
        public class ListAttribute : PXStringListAttribute
        {
            public ListAttribute() : base(new string[] { Active, Inactive, OnRepair },
                new string[] { "Active", "Inactive", "On Repair" })
            {

            }
        }
        public const string Active = "A";
        public const string Inactive = "I";
        public const string OnRepair = "R";
        public const decimal Excess = (decimal)0.20;
        public class active : Constant<string>
        {
            public active() : base(Active) { }
        }

        public class inactive : Constant<string>
        {
            public inactive() : base(Inactive) { }
        }

        public class onRepair : Constant<string>
        {
            public onRepair() : base(OnRepair) { }
        }
        public class excess : Constant<decimal>
        {
            public excess() : base(Excess) { }
        }


    }
    //end


    [Serializable]
    [PXPrimaryGraph(typeof(TruckMaint))]
  public class Truck : IBqlTable
  {
       
    #region DriverID
    [PXDBString(50, IsUnicode = true, InputMask = "")]
        [PXDefault()]
        [PXUIField(DisplayName = "Driver ID")]
    [PXSelector (typeof(EPEmployee.acctName),
    typeof(EPEmployee.departmentID)
    )]
    public virtual string DriverID { get; set; }
    public abstract class driverID : PX.Data.BQL.BqlString.Field<driverID> { }
    #endregion

    #region AssetID
    [PXDBInt()]
    [PXUIField(DisplayName = "Asset ID")] 
      [PXSelector (typeof(FixedAsset.assetID),
      typeof(FixedAsset.assetCD),
      typeof(FixedAsset.assetID),
      typeof(FixedAsset.description),
      SubstituteKey = typeof(FixedAsset.assetCD))]
    public virtual int? AssetID { get; set; }
    public abstract class assetID : PX.Data.BQL.BqlInt.Field<assetID> { }
    #endregion

    #region TruckCapacityCMB
    [PXDBDecimal()]
    [PXUIField(DisplayName = "Truck Capacity CMB")]
        [PXDefault()]
        public virtual Decimal? TruckCapacityCMB { get; set; }
    public abstract class truckCapacityCMB : PX.Data.BQL.BqlDecimal.Field<truckCapacityCMB> { }
    #endregion

    #region TruckCapacityKGS
    [PXDBDecimal()]
    [PXUIField(DisplayName = "Truck Capacity KGS")]
    [PXDefault()]
        public virtual Decimal? TruckCapacityKGS { get; set; }
    public abstract class truckCapacityKGS : PX.Data.BQL.BqlDecimal.Field<truckCapacityKGS> { }
    #endregion

    #region Status
    [PXDBString(1, IsFixed = true, InputMask = "")]
    [PXDefault(TruckStatus.Active)]
    [PXUIField(DisplayName = "Status")]
    [TruckStatus.List]
    
      
    public virtual string Status { get; set; }
    public abstract class status : PX.Data.BQL.BqlString.Field<status> { }
    #endregion

    #region Descr
    [PXDBString(64, IsUnicode = true, InputMask = "")]
    [PXUIField(DisplayName = "Description")]
    public virtual string Descr { get; set; }
    public abstract class descr : PX.Data.BQL.BqlString.Field<descr> { }
    #endregion

    #region Brand
    [PXDBString(64, IsUnicode = true, InputMask = "")]
    [PXUIField(DisplayName = "Manufactured By")]
    public virtual string Brand { get; set; }
    public abstract class brand : PX.Data.BQL.BqlString.Field<brand> { }
    #endregion

    #region Model
    [PXDBString(64, IsUnicode = true, InputMask = "")]
    [PXUIField(DisplayName = "Model")]
    public virtual string Model { get; set; }
    public abstract class model : PX.Data.BQL.BqlString.Field<model> { }
    #endregion

    #region BranchID
    [PXDBInt()]
    [PXUIField(DisplayName = "Branch ID")]
      [PXSelector(
     typeof(Branch.branchID),
     typeof(Branch.branchCD),
     typeof(Branch.acctName),
     SubstituteKey = typeof(Branch.branchCD))]
    public virtual int? BranchID { get; set; }
    public abstract class branchID : PX.Data.BQL.BqlInt.Field<branchID> { }
    #endregion

    #region Tstamp
    [PXDBTimestamp()]
    [PXUIField(DisplayName = "Tstamp")]
    public virtual byte[] Tstamp { get; set; }
    public abstract class tstamp : PX.Data.BQL.BqlByteArray.Field<tstamp> { }
    #endregion

    #region CreatedByID
    [PXDBCreatedByID()]
    public virtual Guid? CreatedByID { get; set; }
    public abstract class createdByID : PX.Data.BQL.BqlGuid.Field<createdByID> { }
    #endregion

    #region CreatedByScreenID
    [PXDBCreatedByScreenID()]
    public virtual string CreatedByScreenID { get; set; }
    public abstract class createdByScreenID : PX.Data.BQL.BqlString.Field<createdByScreenID> { }
    #endregion

    #region CreatedDateTime
    [PXDBCreatedDateTime()]
    [PXUIField(DisplayName = "Created Date Time")]
    public virtual DateTime? CreatedDateTime { get; set; }
    public abstract class createdDateTime : PX.Data.BQL.BqlDateTime.Field<createdDateTime> { }
    #endregion

    #region LastModifiedByID
    [PXDBLastModifiedByID()]
    public virtual Guid? LastModifiedByID { get; set; }
    public abstract class lastModifiedByID : PX.Data.BQL.BqlGuid.Field<lastModifiedByID> { }
    #endregion

    #region LastModifiedByScreenID
    [PXDBLastModifiedByScreenID()]
    public virtual string LastModifiedByScreenID { get; set; }
    public abstract class lastModifiedByScreenID : PX.Data.BQL.BqlString.Field<lastModifiedByScreenID> { }
    #endregion

    #region LastModifiedDateTime
    [PXDBLastModifiedDateTime()]
    [PXUIField(DisplayName = "Last Modified Date Time")]
    public virtual DateTime? LastModifiedDateTime { get; set; }
    public abstract class lastModifiedDateTime : PX.Data.BQL.BqlDateTime.Field<lastModifiedDateTime> { }
    #endregion

    #region TruckCD
    [PXDBString(30, IsUnicode = true, InputMask = ">CCC-0000000", IsKey= true)]
    [PXUIField(DisplayName = "Plate No./Conduction No.")]
    public virtual string TruckCD { get; set; }
    public abstract class truckCD : PX.Data.BQL.BqlString.Field<truckCD> { }
    #endregion

    #region TruckID
    [PXDBIdentity]
       public virtual int? TruckID { get; set; }
    public abstract class truckID : PX.Data.BQL.BqlInt.Field<truckID> { }
        #endregion

        #region BranchName
        public abstract class branchName : IBqlField { }
        [PXString(25)]
        [PXUIField(DisplayName = "Branch Name",Enabled = false)]
        [PXUnboundDefault(typeof(Search<Branch.acctName,Where<Branch.branchID,Equal<Current<branchID>>>>))]
        public virtual string BranchName { get; set; }

        #endregion
    }
}]]></CDATA>
</Graph>
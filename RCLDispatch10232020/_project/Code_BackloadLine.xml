<Graph ClassName="BackloadLine" Source="#CDATA" IsNew="True" FileType="NewDac">
    <CDATA name="Source"><![CDATA[using System;
using PX.Data;
using PX.Objects.IN;
namespace Dispatch
{
  [Serializable]
  public class BackloadLine : IBqlTable
  {
    #region RecordID

    public abstract class recordID : PX.Data.BQL.BqlInt.Field<recordID> { }
    [PXDBIdentity(IsKey =true)]
    public virtual int? RecordID { get; set; }

    #endregion
    #region BackloadNbr
        [PXDBString(15, IsUnicode = true, InputMask = "")]
    [PXUIField(DisplayName = "Backload Nbr")]
    [PXDBDefault(typeof(Backload.backloadNbr))]
    [PXParent(typeof(Select<Backload,Where<Backload.backloadNbr,Equal<Current<backloadNbr>>>>))]
    public virtual string BackloadNbr { get; set; }
    public abstract class backloadNbr : PX.Data.BQL.BqlString.Field<backloadNbr> { }
    #endregion

    #region BackloadType
    [PXDBString(5, IsUnicode = true, InputMask = "")]
    [PXUIField(DisplayName = "Backload Type")]
    [BLoadTypeSelector]
    [PXDefault()]
    public virtual string BackloadType { get; set; }
    public abstract class backloadType : PX.Data.BQL.BqlString.Field<backloadType> { }
    #endregion

    #region BackloadLineNbr
    [PXDBInt()]
    [PXUIField(DisplayName = "Backload Line Nbr")]
    [PXLineNbr(typeof(Backload.lineCntr))]
    public virtual int? BackloadLineNbr { get; set; }
    public abstract class backloadLineNbr : PX.Data.BQL.BqlInt.Field<backloadLineNbr> { }
        #endregion


    #region ShipmentNbr
        [PXDBString(15, IsUnicode = true, InputMask = "")]
    [PXUIField(DisplayName = "Shipment Nbr")]
    public virtual string ShipmentNbr { get; set; }
    public abstract class shipmentNbr : PX.Data.BQL.BqlString.Field<shipmentNbr> { }
        #endregion
    #region UOM
    public abstract class uOM : PX.Data.BQL.BqlString.Field<uOM> { }
    protected String _UOM;
    [INUnit(typeof(inventoryID), DisplayName = "UOM", Enabled = false)]
    public virtual String UOM
    {
        get
        {
            return this._UOM;
        }
        set
        {
            this._UOM = value;
        }
    }
    #endregion

    #region ShipmentType
        [PXDBString(5, IsUnicode = true, InputMask = "")]
    [PXUIField(DisplayName = "Shipment Type")]
    public virtual string ShipmentType { get; set; }
    public abstract class shipmentType : PX.Data.BQL.BqlString.Field<shipmentType> { }
    #endregion

    #region ShipmentLineNbr
    [PXDBInt()]
    [PXUIField(DisplayName = "Shipment Line Nbr")]
    public virtual int? ShipmentLineNbr { get; set; }
    public abstract class shipmentLineNbr : PX.Data.BQL.BqlInt.Field<shipmentLineNbr> { }
    #endregion

    #region InvoiceNbr
    [PXDBString(15, IsUnicode = true, InputMask = "")]
    [PXUIField(DisplayName = "Invoice Nbr")]
    public virtual string InvoiceNbr { get; set; }
    public abstract class invoiceNbr : PX.Data.BQL.BqlString.Field<invoiceNbr> { }
        #endregion
    
    #region InventoryID
        [PXDBInt()]
    [PXUIField(DisplayName = "Inventory ID")]
    [PXSelector(typeof(Search<InventoryItem.inventoryID>),typeof(InventoryItem.inventoryCD),typeof(InventoryItem.descr),SubstituteKey = typeof(InventoryItem.inventoryCD),DescriptionField = typeof(InventoryItem.descr))]
    public virtual int? InventoryID { get; set; }
    public abstract class inventoryID : PX.Data.BQL.BqlInt.Field<inventoryID> { }
    #endregion

    #region Qty
    [PXDBDecimal()]
    [PXUIField(DisplayName = "Qty")]
    [PXDefault(TypeCode.Decimal, "0.00", PersistingCheck = PXPersistingCheck.Nothing)]
    public virtual Decimal? Qty { get; set; }
    public abstract class qty : PX.Data.BQL.BqlDecimal.Field<qty> { }
        #endregion

    #region SiteID
    public abstract class siteID : PX.Data.BQL.BqlInt.Field<siteID> { }
    [SiteAvail(typeof(inventoryID))]
    public virtual int? SiteID { get; set; }
        #endregion

    #region LocationID
    public abstract class locationID : PX.Data.BQL.BqlInt.Field<locationID> { }
    protected Int32? _LocationID;
    [LocationAvail(typeof(inventoryID), typeof(INTran.subItemID), typeof(siteID), false, false, true, DisplayName = "Location Warehouse")]
    public virtual Int32? LocationID
    {
        get
        {
            return this._LocationID;
        }
        set
        {
            this._LocationID = value;
        }
    }
    #endregion

    #region Tstamp
            [PXDBTimestamp()]
    [PXUIField(DisplayName = "Tstamp")]
    public virtual byte[] Tstamp { get; set; }
    public abstract class tstamp : PX.Data.BQL.BqlByteArray.Field<tstamp> { }
    #endregion

    #region CreatedByID
    [PXDBCreatedByID()]
    public virtual Guid? CreatedByID { get; set; }
    public abstract class createdByID : PX.Data.BQL.BqlGuid.Field<createdByID> { }
    #endregion

    #region CreatedDateT9ke
    [PXDBCreatedDateTime()]
    [PXUIField(DisplayName = "Created Date T9ke")]
    public virtual DateTime? CreatedDateT9ke { get; set; }
    public abstract class createdDateT9ke : PX.Data.BQL.BqlDateTime.Field<createdDateT9ke> { }
    #endregion

    #region CreatedByScreenID
    [PXDBCreatedByScreenID()]
    public virtual string CreatedByScreenID { get; set; }
    public abstract class createdByScreenID : PX.Data.BQL.BqlString.Field<createdByScreenID> { }
    #endregion

    #region LastModifiedByID
    [PXDBLastModifiedByID()]
    public virtual Guid? LastModifiedByID { get; set; }
    public abstract class lastModifiedByID : PX.Data.BQL.BqlGuid.Field<lastModifiedByID> { }
    #endregion

    #region LastModifiedByScreenID
    [PXDBLastModifiedByScreenID()]
    public virtual string LastModifiedByScreenID { get; set; }
    public abstract class lastModifiedByScreenID : PX.Data.BQL.BqlString.Field<lastModifiedByScreenID> { }
    #endregion

    #region LastModifiedDateTime
    [PXDBLastModifiedDateTime()]
    [PXUIField(DisplayName = "Last Modified Date Time")]
    public virtual DateTime? LastModifiedDateTime { get; set; }
    public abstract class lastModifiedDateTime : PX.Data.BQL.BqlDateTime.Field<lastModifiedDateTime> { }
    #endregion
  }
}]]></CDATA>
</Graph>
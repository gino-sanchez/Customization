<Graph ClassName="BackloadType" Source="#CDATA" IsNew="True" FileType="NewDac">
    <CDATA name="Source"><![CDATA[using System;
using PX.Data;
using PX.Objects.SO;

namespace Dispatch
{
    [Serializable]
    public class BackloadType : IBqlTable
    {
        #region BackloadTypeID
        [PXDBIdentity()]
        public virtual int? BackloadTypeID { get; set; }
        public abstract class backloadTypeID : PX.Data.BQL.BqlInt.Field<backloadTypeID> { }
        #endregion

        #region BackloadTypeCD
        [PXDBString(10, IsKey = true, IsUnicode = true, InputMask = ">CCCCCCCCCC")]
        [PXUIField(DisplayName = "Backload Type CD")]
        public virtual string BackloadTypeCD { get; set; }
        public abstract class backloadTypeCD : PX.Data.BQL.BqlString.Field<backloadTypeCD> { }
        #endregion

        #region Descr
        [PXDBString(50, IsUnicode = true, InputMask = "")]
        [PXUIField(DisplayName = "Descr")]
        public virtual string Descr { get; set; }
        public abstract class descr : PX.Data.BQL.BqlString.Field<descr> { }
        #endregion

        #region IsActive
        [PXDBBool()]
        [PXUIField(DisplayName = "Active")]
        [PXDefault(false, PersistingCheck = PXPersistingCheck.Nothing)]
        public virtual bool? IsActive { get; set; }
        public abstract class isActive : PX.Data.BQL.BqlBool.Field<isActive> { }
        #endregion

        #region ReturnType
        public abstract class backloadReturn : PX.Data.BQL.BqlBool.Field<backloadReturn> { }
        [PXDBBool]
        [PXUIField(DisplayName = "With Return Type?")]
        [PXDefault(false, PersistingCheck = PXPersistingCheck.Nothing)]
        public virtual bool? BackloadReturn { get; set; }
        #endregion
        #region Damage
        public abstract class damage : PX.Data.BQL.BqlBool.Field<damage> { }
        [PXDBBool]
        [PXUIField(DisplayName = "Damage Items")]
        [PXDefault(false, PersistingCheck = PXPersistingCheck.Nothing)]
        public virtual bool? Damage { get; set; }
        #endregion
        #region Goods
        public abstract class goods : PX.Data.BQL.BqlBool.Field<goods> { }
        [PXDBBool]
        [PXUIField(DisplayName = "Good Items")]
        [PXDefault(false, PersistingCheck = PXPersistingCheck.Nothing)]
        public virtual bool? Goods { get; set; }
        #endregion
        #region Issue
        public abstract class issue : PX.Data.BQL.BqlBool.Field<issue> { }
        [PXDBBool()]
        [PXUIField(DisplayName = "Issue")]
        [PXDefault(false, PersistingCheck = PXPersistingCheck.Nothing)]
        public virtual bool? Issue { get; set; }
        #endregion
        #region OnestepToStagingArea
        public abstract class oneStepStaging : PX.Data.BQL.BqlBool.Field<oneStepStaging> { }
        [PXDBBool()]
        [PXUIField(DisplayName = "One step to Staging Area")]
        [PXDefault(false,PersistingCheck = PXPersistingCheck.Nothing)]
        public virtual bool? OneStepStaging { get; set; }
        #endregion
        #region OnestepToDefaultWarehouseLocation
        public abstract class oneStepDefaultWarehouseLocation : PX.Data.BQL.BqlBool.Field<oneStepDefaultWarehouseLocation> { }
        [PXDBBool()]
        [PXUIField(DisplayName = "One step to Default Warehouse Location")]
        [PXDefault(false, PersistingCheck = PXPersistingCheck.Nothing)]
        public virtual bool? OneStepDefaultWarehouseLocation { get; set; }
        #endregion
        #region WithBufferItems
        public abstract class withBuffer : PX.Data.BQL.BqlBool.Field<withBuffer> { }
        [PXDBBool()]
        [PXUIField(DisplayName = "Buffer Backload")]
        [PXDefault(false, PersistingCheck = PXPersistingCheck.Nothing)]
        public virtual bool? WithBuffer { get; set; }

        #endregion
        #region ReturnToDmgWarehouse
        public abstract class returnToDmgWarehouse : PX.Data.BQL.BqlBool.Field<returnToDmgWarehouse> { }

        [PXDBBool()]
        [PXUIField(DisplayName = "One Step to RMA Warehouse Dmg Location")]
        [PXDefault(false,PersistingCheck = PXPersistingCheck.Nothing)]

        public virtual bool? ReturnToDmgWarehouse { get; set; }
        #endregion

        #region Tstamp
        [PXDBTimestamp()]
        [PXUIField(DisplayName = "Tstamp")]
        public virtual byte[] Tstamp { get; set; }
        public abstract class tstamp : PX.Data.BQL.BqlByteArray.Field<tstamp> { }
        #endregion

    #region CreatedByID
    [PXDBCreatedByID()]
    public virtual Guid? CreatedByID { get; set; }
    public abstract class createdByID : PX.Data.BQL.BqlGuid.Field<createdByID> { }
    #endregion

    #region CreatedByScreenID
    [PXDBCreatedByScreenID()]
    public virtual string CreatedByScreenID { get; set; }
    public abstract class createdByScreenID : PX.Data.BQL.BqlString.Field<createdByScreenID> { }
    #endregion

    #region CreatedDateTime
    [PXDBCreatedDateTime()]
    [PXUIField(DisplayName = "Created Date Time")]
    public virtual DateTime? CreatedDateTime { get; set; }
    public abstract class createdDateTime : PX.Data.BQL.BqlDateTime.Field<createdDateTime> { }
    #endregion

    #region LastModifiedByID
    [PXDBLastModifiedByID()]
    public virtual Guid? LastModifiedByID { get; set; }
    public abstract class lastModifiedByID : PX.Data.BQL.BqlGuid.Field<lastModifiedByID> { }
    #endregion

    #region LastModifiedByScreenID
    [PXDBLastModifiedByScreenID()]
    public virtual string LastModifiedByScreenID { get; set; }
    public abstract class lastModifiedByScreenID : PX.Data.BQL.BqlString.Field<lastModifiedByScreenID> { }
    #endregion

    #region LastModifiedDateTime
    [PXDBLastModifiedDateTime()]
    [PXUIField(DisplayName = "Last Modified Date Time")]
    public virtual DateTime? LastModifiedDateTime { get; set; }
    public abstract class lastModifiedDateTime : PX.Data.BQL.BqlDateTime.Field<lastModifiedDateTime> { }
    #endregion
  }
}]]></CDATA>
</Graph>
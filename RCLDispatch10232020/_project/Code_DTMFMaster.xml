<Graph ClassName="DTMFMaster" Source="#CDATA" IsNew="True" FileType="NewDac">
    <CDATA name="Source"><![CDATA[using System;
using PX.Data;
using DispatchSetup;
using PX.Objects.CS;
using PX.Objects.EP;
using PX.Objects.IN;
using PX.Objects.CR.MassProcess;

namespace Dispatch
{
  [Serializable]
  public class DTMFMaster : IBqlTable
  {
    #region RefNbr
    [PXDBString(15, IsKey = true, IsUnicode = true, InputMask = "")]
    [PXUIField(DisplayName = "Ref Nbr")]
    [PXSelector(typeof(Search<refNbr>))]
    [AutoNumber(typeof(DispatchNumberingSetup.dTMFNumberingID), typeof(AccessInfo.businessDate))]
    public virtual string RefNbr { get; set; }
    public abstract class refNbr : PX.Data.BQL.BqlString.Field<refNbr> { }
        #endregion

        #region LineCntr

        [PXDBInt()]
        [PXDefault(0)]
        [PXUIField(DisplayName = "Line Cntr")]
        public virtual int? LineCntr { get; set; }
        public abstract class lineCntr : PX.Data.BQL.BqlString.Field<lineCntr> { }

        #endregion

        #region DocDate
        [PXDBDate()]
    [PXUIField(DisplayName = "Doc Date")]
    [PXDefault(typeof(AccessInfo.businessDate))]
    public virtual DateTime? DocDate { get; set; }
    public abstract class docDate : PX.Data.BQL.BqlDateTime.Field<docDate> { }
    #endregion

    #region Branch
    [PXDBInt()]
    [PXUIField(DisplayName = "Branch")]
    [PXDefault(typeof(AccessInfo.branchID))]
    [PXSelector(typeof(INSite.siteID),SubstituteKey = typeof(INSite.siteCD))]
    public virtual int? Branch { get; set; }
    public abstract class branch : PX.Data.BQL.BqlInt.Field<branch> { }
    #endregion

    #region DeliveryDate
    [PXDBDateAndTime(DisplayNameDate = "Delivery Date", DisplayNameTime = "Departure Time")]
    [PXUIField(DisplayName = "Delivery Date")]
    [PXDefault()]
    
    public virtual DateTime? DeliveryDate { get; set; }
    public abstract class deliveryDate : PX.Data.BQL.BqlDateTime.Field<deliveryDate> { }
        #endregion

     

        #region TruckPlateNo
        [PXDBString(15, IsUnicode = true, InputMask = "")]
    [PXUIField(DisplayName = "Truck Plate No")]
    [PXDefault()]
       
        [PXSelector(typeof(Search<Truck.truckID>),SubstituteKey = typeof(Truck.truckCD))]
    public virtual string TruckPlateNo { get; set; }
    public abstract class truckPlateNo : PX.Data.BQL.BqlString.Field<truckPlateNo> { }
    #endregion

    #region Description
    [PXDBString(150, IsUnicode = true, InputMask = "")]
    [PXUIField(DisplayName = "Description")]
    public virtual string Description { get; set; }
    public abstract class description : PX.Data.BQL.BqlString.Field<description> { }
    #endregion

    #region CheckedBy
    [PXDBInt()]
    [PXUIField(DisplayName = "Checked By")]
    [EmployeeRaw]
    public virtual int? CheckedBy { get; set; }
    public abstract class checkedBy : PX.Data.BQL.BqlInt.Field<checkedBy> { }
        #endregion

        #region NotedBy
        [PXDBInt()]
        [PXUIField(DisplayName = "Noted By")]
        [EmployeeRaw]
        public virtual int? NotedBy { get; set; }
        public abstract class notedBy : PX.Data.BQL.BqlInt.Field<notedBy> { }
        #endregion

        #region FlatChartQtyOut
        [PXDBDecimal()]
        [PXUIField(DisplayName = "Flat Chart Qty Out")]
        public virtual Decimal? FlatChartQtyOut { get; set; }
        public abstract class flatChartQtyOut : PX.Data.BQL.BqlDecimal.Field<flatChartQtyOut> { }
        #endregion

        #region FlatChartQtyIn
        [PXDBDecimal()]
        [PXUIField(DisplayName = "Flat Chart Qty In")]
        public virtual Decimal? FlatChartQtyIn { get; set; }
        public abstract class flatChartQtyIn : PX.Data.BQL.BqlDecimal.Field<flatChartQtyIn> { }
        #endregion

        #region PalletQtyOut
        [PXDBDecimal()]
        [PXUIField(DisplayName = "Pallet Qty Out")]
        public virtual Decimal? PalletQtyOut { get; set; }
        public abstract class palletQtyOut : PX.Data.BQL.BqlDecimal.Field<palletQtyOut> { }
        #endregion

        #region PalletQtyIn
        [PXDBDecimal()]
        [PXUIField(DisplayName = "Pallet Qty In")]
        public virtual Decimal? PalletQtyIn { get; set; }
        public abstract class palletQtyIn : PX.Data.BQL.BqlDecimal.Field<palletQtyIn> { }
        #endregion

        #region OdometerReadingOut
        [PXDBDecimal()]
        [PXUIField(DisplayName = "Odometer Reading Out")]
        public virtual Decimal? OdometerReadingOut { get; set; }
        public abstract class odometerReadingOut : PX.Data.BQL.BqlDecimal.Field<odometerReadingOut> { }
        #endregion

        #region OdometerReadingIn
        [PXDBDecimal()]
        [PXUIField(DisplayName = "Odometer Reading In")]
        public virtual Decimal? OdometerReadingIn { get; set; }
        public abstract class odometerReadingIn : PX.Data.BQL.BqlDecimal.Field<odometerReadingIn> { }
        #endregion

        #region OdometerReaderOut
        [PXDBBool()]
        [PXUIField(DisplayName = "Odometer Reader Out")]
        public virtual bool? OdometerReaderOut { get; set; }
        public abstract class odometerReaderOut : PX.Data.BQL.BqlBool.Field<odometerReaderOut> { }
        #endregion

        #region OdometerReaderIn
        [PXDBBool()]
        [PXUIField(DisplayName = "Odometer Reader In")]
        public virtual bool? OdometerReaderIn { get; set; }
        public abstract class odometerReaderIn : PX.Data.BQL.BqlBool.Field<odometerReaderIn> { }
        #endregion

        #region DetailsIn
        [PXDBString(100, IsUnicode = true)]
        [PXUIField(DisplayName = "Details")]
        
        
        public virtual string DetailsIn { get; set; }
        public abstract class detailsIn : PX.Data.BQL.BqlString.Field<detailsIn> { }
        #endregion

        #region DetailsOut
        [PXDBString(100, IsUnicode = true)]
        [PXUIField(DisplayName = "Details")]
     
        public virtual string DetailsOut { get; set; }
        public abstract class detailsOut : PX.Data.BQL.BqlString.Field<detailsOut> { }
        #endregion

        #region ActualDepartureDate
        [PXDBDateAndTime(DisplayNameDate = "Actual Departure Date",DisplayNameTime = "Dispatch Out Time")]
        [PXUIField(DisplayName = "Actual Departure Date")]
        public virtual DateTime? ActualDepartureDate { get; set; }
        public abstract class actualDepartureDate : PX.Data.BQL.BqlDateTime.Field<actualDepartureDate> { }
        #endregion



        #region ActualOutInspector
        [PXDBInt()]
        [PXUIField(DisplayName = "Actual Out Inspector")]
        [EmployeeRaw]
        public virtual int? ActualOutInspector { get; set; }
        public abstract class actualOutInspector : PX.Data.BQL.BqlInt.Field<actualOutInspector> { }
        #endregion

        #region ActualReturnDate
        [PXDBDateAndTime(DisplayNameTime = "Dispatch In Time", DisplayNameDate = "Actual Return Date")]
        [PXUIField(DisplayName = "Actual Return Date")]
        public virtual DateTime? ActualReturnDate { get; set; }
        public abstract class actualReturnDate : PX.Data.BQL.BqlDateTime.Field<actualReturnDate> { }
        #endregion

   

        #region ActualInInspector
        [PXDBInt()]
        [PXUIField(DisplayName = "Actual In Inspector")]
        [EmployeeRaw]
        public virtual int? ActualInInspector { get; set; }
        public abstract class actualInInspector : PX.Data.BQL.BqlInt.Field<actualInInspector> { }
        #endregion

        #region WithoutBackLoad
        [PXDBBool()]
        [PXUIField(DisplayName = "Without Back Load")]
        [PXDefault(false, PersistingCheck = PXPersistingCheck.Nothing)]
        public virtual bool? WithoutBackLoad { get; set; }
        public abstract class withoutBackLoad : PX.Data.BQL.BqlBool.Field<withoutBackLoad> { }
        #endregion

        #region WithBackLoad
        [PXDBBool()]
        [PXUIField(DisplayName = "With Back Load")]
        [PXDefault(false, PersistingCheck = PXPersistingCheck.Nothing)]
        public virtual bool? WithBackLoad { get; set; }
        public abstract class withBackLoad : PX.Data.BQL.BqlBool.Field<withBackLoad> { }
        #endregion

        #region BackLoadFormRefNo
        [PXDBString(15, IsUnicode = true, InputMask = "")]
        [PXUIField(DisplayName = "Back Load Form Ref No")]
        public virtual string BackLoadFormRefNo { get; set; }
        public abstract class backLoadFormRefNo : PX.Data.BQL.BqlString.Field<backLoadFormRefNo> { }
        #endregion


        #region LastTruckOutDate
        [PXDBDateAndTime(DisplayNameDate = "Recent Actual Departure Date",DisplayNameTime = "Recent Dispatch Out Time")]
        [PXUIField(DisplayName = "Recent Actual Departure Date")]
        public virtual DateTime? LastTruckOutDate { get; set; }
        public abstract class lastTruckOutDate : PX.Data.BQL.BqlDateTime.Field<lastTruckOutDate> { }

        #endregion

        #region LastTruckInDate
        [PXDBDateAndTime(DisplayNameDate = "Recent Actual Return Date", DisplayNameTime = "Recent Dispatch In Time")]
        [PXUIField(DisplayName = "Recent Actual Return Date")]
        public virtual DateTime? LastTruckInDate { get; set; }
        public abstract class lastTruckInDate : PX.Data.BQL.BqlDateTime.Field<lastTruckInDate> { }

        #endregion

        #region Tstamp
        [PXDBTimestamp()]
    [PXUIField(DisplayName = "Tstamp")]
    public virtual byte[] Tstamp { get; set; }
    public abstract class tstamp : PX.Data.BQL.BqlByteArray.Field<tstamp> { }
    #endregion

    #region CreatedByID
    [PXDBCreatedByID()]
    public virtual Guid? CreatedByID { get; set; }
    public abstract class createdByID : PX.Data.BQL.BqlGuid.Field<createdByID> { }
    #endregion

    #region CreatedByScreenID
    [PXDBCreatedByScreenID()]
    public virtual string CreatedByScreenID { get; set; }
    public abstract class createdByScreenID : PX.Data.BQL.BqlString.Field<createdByScreenID> { }
    #endregion

    #region CreatedDateTime
    [PXDBCreatedDateTime()]
    [PXUIField(DisplayName = "Created Date Time")]
    public virtual DateTime? CreatedDateTime { get; set; }
    public abstract class createdDateTime : PX.Data.BQL.BqlDateTime.Field<createdDateTime> { }
    #endregion

    #region LastModifiedByID
    [PXDBLastModifiedByID()]
    public virtual Guid? LastModifiedByID { get; set; }
    public abstract class lastModifiedByID : PX.Data.BQL.BqlGuid.Field<lastModifiedByID> { }
    #endregion

    #region LastModifiedByScreenID
    [PXDBLastModifiedByScreenID()]
    public virtual string LastModifiedByScreenID { get; set; }
    public abstract class lastModifiedByScreenID : PX.Data.BQL.BqlString.Field<lastModifiedByScreenID> { }
    #endregion

    #region LastModifiedDateTime
    [PXDBLastModifiedDateTime()]
    [PXUIField(DisplayName = "Last Modified Date Time")]
    public virtual DateTime? LastModifiedDateTime { get; set; }
    public abstract class lastModifiedDateTime : PX.Data.BQL.BqlDateTime.Field<lastModifiedDateTime> { }
    #endregion
  }
}]]></CDATA>
</Graph>
<Graph ClassName="DispatchNumberingSetup" Source="#CDATA" IsNew="True" FileType="NewDac">
    <CDATA name="Source"><![CDATA[using System;
using PX.Data;
using PX.Objects.CS;
using Dispatch;
using PX.Objects.SO;

namespace DispatchSetup
{
  [Serializable]
  public class DispatchNumberingSetup : IBqlTable
  {
    #region Tstamp
    [PXDBTimestamp()]
    [PXUIField(DisplayName = "Tstamp")]
    public virtual byte[] Tstamp { get; set; }
    public abstract class tstamp : PX.Data.BQL.BqlByteArray.Field<tstamp> { }
    #endregion

    #region CreatedByID
    [PXDBCreatedByID()]
    public virtual Guid? CreatedByID { get; set; }
    public abstract class createdByID : PX.Data.BQL.BqlGuid.Field<createdByID> { }
    #endregion

    #region CreatedByScreenID
    [PXDBCreatedByScreenID()]
    public virtual string CreatedByScreenID { get; set; }
    public abstract class createdByScreenID : PX.Data.BQL.BqlString.Field<createdByScreenID> { }
    #endregion

    #region CreatedDateTime
    [PXDBCreatedDateTime()]
    [PXUIField(DisplayName = "Created Date Time")]
    public virtual DateTime? CreatedDateTime { get; set; }
    public abstract class createdDateTime : PX.Data.BQL.BqlDateTime.Field<createdDateTime> { }
    #endregion

    #region LastModifiedByID
    [PXDBLastModifiedByID()]
    public virtual Guid? LastModifiedByID { get; set; }
    public abstract class lastModifiedByID : PX.Data.BQL.BqlGuid.Field<lastModifiedByID> { }
    #endregion

    #region LastModifiedByScreenID
    [PXDBLastModifiedByScreenID()]
    public virtual string LastModifiedByScreenID { get; set; }
    public abstract class lastModifiedByScreenID : PX.Data.BQL.BqlString.Field<lastModifiedByScreenID> { }
    #endregion

    #region LastModifiedDateTime
    [PXDBLastModifiedDateTime()]
    [PXUIField(DisplayName = "Last Modified Date Time")]
    public virtual DateTime? LastModifiedDateTime { get; set; }
    public abstract class lastModifiedDateTime : PX.Data.BQL.BqlDateTime.Field<lastModifiedDateTime> { }
    #endregion

    #region ZoneNumberingID
    [PXDBString(10, IsUnicode = true, InputMask = "")]
    [PXUIField(DisplayName = "Zone Numbering ID")]
    [PXSelector(typeof(Numbering.numberingID),
        DescriptionField = typeof(Numbering.descr))]
        //[AutoNumber(typeof(DispatchNumberingSetup.zoneNumberingID), typeof(AccessInfo.businessDate))]
    public virtual string ZoneNumberingID { get; set; }
    public abstract class zoneNumberingID : PX.Data.BQL.BqlString.Field<zoneNumberingID> { }
    #endregion

    #region TripTicketNumberingID
    [PXDBString(10, IsUnicode = true, InputMask = "")]
    [PXUIField(DisplayName = "Trip Ticket Numbering ID")]
              [PXSelector(typeof(Numbering.numberingID),
        DescriptionField = typeof(Numbering.descr))]
        //[AutoNumber(typeof(DispatchNumberingSetup.tripTicketNumberingID), typeof(AccessInfo.businessDate))]
    public virtual string TripTicketNumberingID { get; set; }
    public abstract class tripTicketNumberingID : PX.Data.BQL.BqlString.Field<tripTicketNumberingID> { }
    #endregion

    #region PickLIstNumberingID
    [PXDBString(10, IsUnicode = true, InputMask = "")]
    [PXUIField(DisplayName = "Pick List Numbering ID")]
              [PXSelector(typeof(Numbering.numberingID),
        DescriptionField = typeof(Numbering.descr))]
        //[AutoNumber(typeof(DispatchNumberingSetup.pickLIstNumberingID), typeof(AccessInfo.businessDate))]
    public virtual string PickLIstNumberingID { get; set; }
    public abstract class pickLIstNumberingID : PX.Data.BQL.BqlString.Field<pickLIstNumberingID> { }
        #endregion

        #region DTMFNumberingID
        public abstract class dTMFNumberingID : PX.Data.BQL.BqlString.Field<dTMFNumberingID> { }
        [PXDBString(10, IsUnicode = true, InputMask = "")]
        [PXUIField(DisplayName = "DTMF Numbering ID")]
        [PXSelector(typeof(Numbering.numberingID), DescriptionField = typeof(Numbering.descr))]
        //[AutoNumber(typeof(dTMFNumberingID),typeof(AccessInfo.businessDate))]
        public virtual string DTMFNumberingID { get; set; }
        #endregion
        #region BackloadNumberingID
        public abstract class backloadNumberingID : PX.Data.BQL.BqlString.Field<backloadNumberingID> { }
        [PXDBString(10,IsUnicode =true,InputMask ="")]
        [PXUIField(DisplayName = "Backload Numbering ID")]
        [PXSelector(typeof(Numbering.numberingID),DescriptionField = typeof(Numbering.descr))]
        //[AutoNumber(typeof(backloadNumberingID),typeof(AccessInfo.businessDate))]
        public virtual string BackLoadNumberingID { get; set; }
        #endregion
        #region BackloadDefaultType
        public abstract class backloadReturnType : PX.Data.BQL.BqlString.Field<backloadReturnType> { }
        [PXDBString(5)]
        [PXUIField(DisplayName ="Backload Return Type")]
        [PXSelector(typeof(Search<SOOrderType.orderType, Where<SOOrderType.active, Equal<True>>>))]
        public virtual string BackloadReturnType { get; set; }
        #endregion

        #region IsForeCasted

        public abstract class isForeCasted : PX.Data.BQL.BqlBool.Field<isForeCasted> { }
        [PXDBBool()]
        [PXUIField(DisplayName = "Forecast is Null")]
        [PXDefault(false, PersistingCheck = PXPersistingCheck.Nothing)]
        public virtual bool? IsForeCasted { get; set; }

        #endregion

        #region RequireInv&Pay
        public abstract class requireInvPay : PX.Data.BQL.BqlBool.Field<requireInvPay> { }
        [PXDBBool()]
        [PXUIField(DisplayName = "Require Invoice and Payment")]
        [PXDefault(false,PersistingCheck = PXPersistingCheck.Nothing)]
        public virtual bool? RequireInvPay { get; set; }
        #endregion
    }
}]]></CDATA>
</Graph>
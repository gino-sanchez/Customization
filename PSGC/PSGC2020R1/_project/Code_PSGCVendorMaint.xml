<Graph ClassName="PSGCVendorMaint" Source="#CDATA" IsNew="True" FileType="NewGraph">
    <CDATA name="Source"><![CDATA[using System;
using System.Collections.Generic;
using System.Collections;
using System.Globalization;
using System.Linq;
using PX.Data;
using PX.Data.BQL.Fluent;
using PX.Data.BQL;
using PX.Objects.CS;
using PX.Objects.CA;
using PX.Objects.CR;
using PX.Objects.CM;
using PX.Objects.Common;
using PX.Objects.GL;
using PX.Objects.PO;
using PX.Objects.TX;
using PX.SM;
using Branch = PX.SM.Branch;
using PX.Objects;
using PX.Objects.AP;
using PSGC;
using PX.Objects.AR;

namespace PX.Objects.AP
{
    public class PSGCVendorMaint_Extension : PXGraphExtension<VendorMaint>
    {

        #region EventHandlers

        public PXFilter<UnboundFilter> MyFilter;
        #region VendorAddress
        protected void Address_RowSelected(PXCache sender, PXRowSelectedEventArgs e)
        {
            var row = e.Row as Address;
            if (row == null) { return; }
            AddressExt rowExt = sender.GetExtension<AddressExt>(row);
            PXUIFieldAttribute.SetEnabled<AddressExt.usrZoneCode>(sender, row, false);
            PXUIFieldAttribute.SetEnabled<Address.addressLine1>(sender, row, false);
            PXUIFieldAttribute.SetEnabled<Address.addressLine2>(sender, row, false);

            if (rowExt.UsrRegion == null)
            {
                sender.SetValueExt<AddressExt.usrProvince>(row, null);
                sender.SetValueExt<AddressExt.usrCity>(row, null);
                sender.SetValueExt<AddressExt.usrBrgy>(row, null);
                sender.SetValueExt<Address.city>(row, null);
                sender.SetValueExt<Address.state>(row, null);
            }
            if (rowExt.UsrProvince == null && rowExt.UsrCity == null)
            {
                sender.SetValueExt<AddressExt.usrBrgy>(row, null);
                sender.SetValueExt<Address.city>(row, null);
                sender.SetValueExt<Address.state>(row, null);
                sender.SetValueExt<AddressExt.usrSubCity>(row, null);

            }
            if (rowExt.UsrBrgy == null)
            {
                sender.SetValueExt<AddressExt.usrStrBldgNoUnitFlr>(row, null);
            }

            if (rowExt.UsrCity != null)
            {
                if (rowExt.UsrCity == 133900000)
                {
                    PXUIFieldAttribute.SetVisible<AddressExt.usrSubCity>(sender, row, true);
                }
                else
                {
                    PXUIFieldAttribute.SetVisible<AddressExt.usrSubCity>(sender, row, false);
                }
            }
            else
            {
                PXUIFieldAttribute.SetVisible<AddressExt.usrSubCity>(sender, row, false);
            }
        }

        protected void Address_UsrBrgy_FieldUpdated(PXCache sender, PXFieldUpdatedEventArgs e)
        {
            var row = e.Row as Address;
            AddressExt rowExt = sender.GetExtension<AddressExt>(row);
            if (row == null) { return; }

            Brgy mySelect = PXSelect<
                Brgy,
                Where<Brgy.brgyCode, Equal<Required<Brgy.brgyCode>>>>
                .Select(Base, rowExt.UsrBrgy);
            if (mySelect == null) { sender.SetValue<AddressExt.usrZoneCode>(row, null); }
            else
            {
                sender.SetValue<AddressExt.usrZoneCode>(row, mySelect.BrgyCode);
            }
        }

        protected void Address_RowUpdated(PXCache sender, PXRowUpdatedEventArgs e)
        {
            var oldRow = e.OldRow as Address;
            var row = e.Row as Address;
            var rowExt = sender.GetExtension<AddressExt>(row);
            var oldRowExt = sender.GetExtension<AddressExt>(oldRow);
            if (row == null) { return; }

            Province selectProvince = PXSelect<
                Province,
                Where<Province.provinceCode, Equal<Required<Province.provinceCode>>>>
                .Select(Base, rowExt.UsrProvince);
            CityMunicipality selectCity = PXSelect<
                CityMunicipality,
                Where<CityMunicipality.cityMunCode, Equal<Required<CityMunicipality.cityMunCode>>>>
                .Select(Base, rowExt.UsrCity);
            Brgy selectBrgy = PXSelect<
                Brgy,
                Where<Brgy.brgyCode, Equal<Required<Brgy.brgyCode>>>>
                .Select(Base, rowExt.UsrBrgy);
            SubMun selectSubMun = PXSelect<
                SubMun,
                Where<SubMun.subMunCode, Equal<Required<SubMun.subMunCode>>>>
                .Select(Base, rowExt.UsrSubCity);
            if (rowExt.UsrCity != null)
            {
                sender.SetValueExt<Address.city>(row, selectCity.CityMunName);
            }
            if (rowExt.UsrProvince != null)
            {
                sender.SetValue<Address.state>(row, selectProvince.ProvinceName);
            }
            if (oldRowExt.UsrRegion != rowExt.UsrRegion)
            {
                sender.SetValueExt<AddressExt.usrProvince>(row, null);
                sender.SetValueExt<AddressExt.usrCity>(row, null);
                sender.SetValueExt<Address.addressLine1>(row, null);
            }
            if (oldRowExt.UsrProvince != rowExt.UsrProvince)
            {
                sender.SetValueExt<AddressExt.usrCity>(row, null);
                sender.SetValueExt<Address.addressLine1>(row, null);
            }
            if (oldRowExt.UsrCity != rowExt.UsrCity)
            {
                sender.SetValueExt<AddressExt.usrBrgy>(row, null);
                sender.SetValueExt<Address.addressLine1>(row, null);
                sender.SetValueExt<AddressExt.usrSubCity>(row, null);
            }
            if (oldRowExt.UsrSubCity != rowExt.UsrSubCity)
            {
                sender.SetValueExt<AddressExt.usrBrgy>(row, null);
                sender.SetValueExt<AddressExt.usrStrBldgNoUnitFlr>(row, null);
            }
            if (rowExt.UsrStrBldgNoUnitFlr == null)
            {
                sender.SetValue<LocationExtAddress.addressLine1>(row, null);
                return;
            }
            if (selectProvince == null)
            {
                if (selectSubMun != null)
                {
                    var concat = rowExt.UsrStrBldgNoUnitFlr + " " + selectBrgy.BrgyName + " " + selectSubMun.SubMunName + "," + " " + selectCity.CityMunName;
                    row.AddressLine1 = concat;
                }
                else
                {
                    var concat = rowExt.UsrStrBldgNoUnitFlr + " " + selectBrgy.BrgyName + "," + " " + selectCity.CityMunName;
                    row.AddressLine1 = concat;
                }
            }

            else if (selectCity == null)
            {
                var concat = rowExt.UsrStrBldgNoUnitFlr + " " + selectBrgy.BrgyName + " " + selectProvince.ProvinceName;
                row.AddressLine1 = concat;
            }
            else if (selectSubMun == null)
            {
                var concat = rowExt.UsrStrBldgNoUnitFlr + " " + selectBrgy.BrgyName + "," + selectCity.CityMunName + " " + selectProvince.ProvinceName;
                row.AddressLine1 = concat;
            }
            else
            {
                var concat = rowExt.UsrStrBldgNoUnitFlr + " " + selectBrgy.BrgyName + "," + selectSubMun.SubMunName + "," + selectCity.CityMunName + " " + selectProvince.ProvinceName;
                row.AddressLine1 = concat;
            }
            if (rowExt.UsrProvince == null)
            {
                return;
            }
            if (rowExt.UsrRegion == null)
            {
                return;
            }
            if (rowExt.UsrCity == null)
            {

                return;
            }
            if (rowExt.UsrBrgy == null) { return; }
            if (rowExt.UsrSubCity == null) { return; }
        }
        #endregion

        #region VendorLocationExtAddress

        protected void LocationExtAddress_RowSelected(PXCache sender, PXRowSelectedEventArgs e)
        {
            var row = e.Row as Address;
            AddressExt rowExt = PXCache<Address>.GetExtension<AddressExt>(row);
            var rowLocation = e.Row as LocationExtAddress;
            if (rowLocation == null) { return; }
            if (row == null) { return; }
            var isSameAsMain = rowLocation.IsAddressSameAsMain == true;
            var cityIsManila = rowExt.UsrCustCity == 133900000;

            MyFilter.Current.RegionFilter = rowExt.UsrCustRegion;
            MyFilter.Current.FilterProvince = rowExt.UsrCustProvince;
            MyFilter.Current.FilterCity = rowExt.UsrCustCity;
            MyFilter.Current.SubCityFilter = rowExt.UsrCustSubCity;
            PXUIFieldAttribute.SetEnabled<AddressExt.usrCustRegion>(sender,row,!isSameAsMain);
            PXUIFieldAttribute.SetEnabled<AddressExt.usrCustProvince>(sender, row, !isSameAsMain);
            PXUIFieldAttribute.SetEnabled<AddressExt.usrCustCity>(sender, row, !isSameAsMain);
            PXUIFieldAttribute.SetEnabled<AddressExt.usrCustSubCity>(sender, row, !isSameAsMain);
            PXUIFieldAttribute.SetEnabled<AddressExt.usrCustBrgy>(sender, row, !isSameAsMain);
            PXUIFieldAttribute.SetEnabled<AddressExt.usrStrBldgNoUnitFlr>(sender, row, !isSameAsMain);
            PXUIFieldAttribute.SetVisible<AddressExt.usrCustSubCity>(sender,row,cityIsManila);
            if (isSameAsMain)
            {
                foreach (Address currentBase in Base.DefLocation.Select())
                {
                    var currentBaseExt = PXCache<Address>.GetExtension<AddressExt>(currentBase);
                    rowLocation.AddressLine1 = currentBase.AddressLine1;
                    sender.SetValueExt<AddressExt.usrCustRegion>(row, currentBaseExt.UsrRegion);
                    sender.SetValueExt<AddressExt.usrCustProvince>(row, currentBaseExt.UsrProvince);
                    sender.SetValueExt<AddressExt.usrCustCity>(row, currentBaseExt.UsrCity);
                    sender.SetValueExt<AddressExt.usrCustSubCity>(row, currentBaseExt.UsrSubCity);
                    sender.SetValueExt<AddressExt.usrCustBrgy>(row, currentBaseExt.UsrBrgy);
                }
            }
        }
        protected void LocationExtAddress_UsrCustBrgy_FieldUpdated(PXCache sender, PXFieldUpdatedEventArgs e)
        {
            var row = e.Row as Address;
            var rowExt = PXCache<Address>.GetExtension<AddressExt>(row);
            if (row == null) { return; }
            Brgy mySelect = PXSelect<
                Brgy,
                Where<Brgy.brgyCode, Equal<Required<Brgy.brgyCode>>>>
                .Select(Base, rowExt.UsrCustBrgy);

            if (mySelect == null) { sender.SetValue<AddressExt.usrZoneCode>(row, null); }
            else
            {
                sender.SetValue<AddressExt.usrZoneCode>(row, mySelect.BrgyCode);
            }
        }
        protected void LocationExtAddress_RowUpdated(PXCache sender, PXRowUpdatedEventArgs e)
        {
            var row = e.Row as Address;
            var rowOld = e.OldRow as Address;
            var rowLocationExtAdd = e.Row as LocationExtAddress;
            var rowLocationExtAddOld = e.OldRow as LocationExtAddress;
            var rowExt = PXCache<Address>.GetExtension<AddressExt>(row);
            var oldRowExt = PXCache<Address>.GetExtension<AddressExt>(rowOld);

            if (row == null) { return; }
            if (rowLocationExtAdd == null) { return; }

            Province selectProvince = PXSelect<
               Province,
               Where<Province.provinceCode, Equal<Required<Province.provinceCode>>>>
               .Select(Base, rowExt.UsrCustProvince);
            CityMunicipality selectCity = PXSelect<
                CityMunicipality,
                Where<CityMunicipality.cityMunCode, Equal<Required<CityMunicipality.cityMunCode>>>>
                .Select(Base, rowExt.UsrCustCity);
            Brgy selectBrgy = PXSelect<
                Brgy,
                Where<Brgy.brgyCode, Equal<Required<Brgy.brgyCode>>>>
                .Select(Base, rowExt.UsrCustBrgy);
            SubMun selectSubMun = PXSelect<
                SubMun,
                Where<SubMun.subMunCode, Equal<Required<SubMun.subMunCode>>>>
                .Select(Base, rowExt.UsrCustSubCity);

            if (row == null) { return; }

            else
            {
                if (rowExt.UsrCustRegion == null)
                {
                    sender.SetValueExt<AddressExt.usrCustProvince>(row, null);
                    sender.SetValueExt<AddressExt.usrCustCity>(row, null);
                    sender.SetValueExt<AddressExt.usrCustBrgy>(row, null);
                    row.State = null;
                    row.City = null;
                }
                if (rowExt.UsrCustCity != null)
                {
                    sender.SetValueExt<LocationExtAddress.city>(row, selectCity.CityMunName);
                }
                if (rowExt.UsrCustProvince != null)
                {
                    sender.SetValue<LocationExtAddress.state>(row, selectProvince.ProvinceName);
                }
                if (oldRowExt.UsrCustRegion != rowExt.UsrCustRegion)
                {
                    sender.SetValueExt<AddressExt.usrCustProvince>(row, null);
                    sender.SetValueExt<AddressExt.usrCustCity>(row, null);
                    sender.SetValueExt<LocationExtAddress.city>(row, null);
                    sender.SetValueExt<LocationExtAddress.state>(row, null);
                }
                if (oldRowExt.UsrCustProvince != rowExt.UsrCustProvince)
                {
                    sender.SetValueExt<AddressExt.usrCustCity>(row, null);
                    sender.SetValueExt<LocationExtAddress.addressLine1>(row, null);
                }
                if (oldRowExt.UsrCustCity != rowExt.UsrCustCity)
                {
                    sender.SetValueExt<AddressExt.usrCustBrgy>(row, null);
                    sender.SetValueExt<LocationExtAddress.addressLine1>(row, null);
                    sender.SetValueExt<AddressExt.usrCustSubCity>(row, null);
                }
                if (oldRowExt.UsrCustSubCity != rowExt.UsrCustSubCity)
                {
                    sender.SetValueExt<AddressExt.usrCustBrgy>(row, null);
                    sender.SetValueExt<AddressExt.usrStrBldgNoUnitFlr>(row, null);
                }
                if (rowExt.UsrStrBldgNoUnitFlr == null)
                {
                    sender.SetValueExt<LocationExtAddress.addressLine1>(row, null);
                    return;
                }
                if (rowExt.UsrStrBldgNoUnitFlr != null && rowExt.UsrCustRegion != null &&
                  rowExt.UsrCustBrgy != null && (rowExt.UsrCustCity != null || rowExt.UsrCustProvince != null))
                {
                    if (selectProvince == null)
                    {

                        if (selectSubMun != null)
                        {
                            var concat = rowExt.UsrStrBldgNoUnitFlr + " " + selectBrgy.BrgyName + " " + selectSubMun.SubMunName + "," + " " + selectCity.CityMunName;
                            row.AddressLine1 = concat;
                        }
                        else
                        {
                            var concat = rowExt.UsrStrBldgNoUnitFlr + " " + selectBrgy.BrgyName + "," + " " + selectCity.CityMunName;
                            row.AddressLine1 = concat;
                        }
                    }
                    else if (selectCity == null)
                    {
                        var concat = rowExt.UsrStrBldgNoUnitFlr + " " + selectBrgy.BrgyName + "," + " " + selectProvince.ProvinceName;
                        rowLocationExtAdd.AddressLine1 = concat;
                    }
                    else if (selectSubMun == null)
                    {
                        var concat = rowExt.UsrStrBldgNoUnitFlr + " " + selectBrgy.BrgyName + "," + selectCity.CityMunName + " " + selectProvince.ProvinceName;
                        row.AddressLine1 = concat;
                    }
                    else
                    {
                        var concat = rowExt.UsrStrBldgNoUnitFlr + " " + selectBrgy.BrgyName + "," + selectSubMun.SubMunName + "," + selectCity.CityMunName + " " + selectProvince.ProvinceName;
                        row.AddressLine1 = concat;
                    }
                }
                if (rowLocationExtAdd.IsAddressSameAsMain == false && rowLocationExtAddOld.IsAddressSameAsMain == true)
                {
                    LocationExtAddress loc = Base.DefLocation.Current;
                    Address select = Base.DefAddress.Current;
                    AddressExt selectExt = PXCache<Address>.GetExtension<AddressExt>(select);

                    loc.AddressLine1 = select.AddressLine1;
                    sender.SetValueExt<AddressExt.usrCustRegion>(row, selectExt.UsrRegion);
                    sender.SetValueExt<AddressExt.usrCustProvince>(row, selectExt.UsrProvince);
                    sender.SetValueExt<AddressExt.usrCustCity>(row, selectExt.UsrCity);
                    sender.SetValueExt<AddressExt.usrCustBrgy>(row, selectExt.UsrBrgy);
                    sender.SetValueExt<AddressExt.usrCustSubCity>(row, selectExt.UsrSubCity);
                    sender.SetValue<LocationExtAddress.city>(row, select.City);
                    sender.SetValue<LocationExtAddress.state>(row, select.State);
                }
                if (rowExt.UsrCustProvince == null)
                {
                    sender.SetValueExt<LocationExtAddress.state>(row, null);
                    return;
                }
                if (rowExt.UsrCustRegion == null)
                {
                    return;
                }
                if (rowExt.UsrCustCity == null)
                {
                    sender.SetValueExt<LocationExtAddress.city>(row, null);
                    return;
                }
                if (rowExt.UsrCustBrgy == null)
                {
                    sender.SetValueExt<AddressExt.usrStrBldgNoUnitFlr>(row, null);
                    return;
                }
            }

        }

    #endregion
    #endregion
}
}]]></CDATA>
</Graph>